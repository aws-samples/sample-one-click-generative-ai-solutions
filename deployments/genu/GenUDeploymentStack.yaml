AWSTemplateFormatVersion: '2010-09-09'
Description: 'Generative AI Use Cases (GenU) one click deployment with automatic update support'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "GenU Deployment Parameters"
        Parameters:
          - Environment
          - NotificationEmailAddress
          - ModelRegion
          - AdditionalModels
          - RAGEnabled
          - SelfSignUp
          - AllowedSignUpEmailDomains
          - AllowedIpV4AddressRanges
          - AllowedIpV6AddressRanges
      - Label:
          default: "Update Configuration"
        Parameters:
          - UsePreviousDeploymentParameter

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name to use for deployment
  
  NotificationEmailAddress:
    Type: String
    Description: 'Email address to receive deployment notifications (Example: test@example.co.jp)'
    AllowedPattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    ConstraintDescription: Must be a valid email address
  
  ModelRegion:
    Type: String
    Default: us-east-1
    AllowedValues: [us-east-1, us-west-2, ap-northeast-1]
    Description: AWS region for Bedrock models

  AdditionalModels:
    Type: String
    Default: "us.anthropic.claude-opus-4-1-20250805-v1:0"
    Description: Additional models to be added to the deployment (comma separated)

  RAGEnabled:
    Type: String
    AllowedValues: ["None", "Knowledge-Bases", "Kendra", "Kendra-Enterprise", "Both", "Both-Enterprise"]
    Default: "None"
    Description: 'Select RAG capabilities: Amazon Bedrock Knowledge Bases, Kendra, Kendra Enterprise Edition, or combinations of them.'
  
  SelfSignUp:
    Type: String
    AllowedValues: [true, false]
    Default: false
    Description: 'Enable self-signup functionality (CAUTION Carefully consider when you allow public access)'
  
  AllowedSignUpEmailDomains:
    Type: String
    Default: ""
    Description: 'Allowed email domains for signup (Example: example1.co.jp, example2.co.jp)'
  
  AllowedIpV4AddressRanges:
    Type: String
    Default: ""
    Description: 'Allowed IPv4 address ranges for access (Example: 10.0.0.100/32, 192.168.0.0/24). Find your current Public IP address here: https://checkip.amazonaws.com/'
  
  AllowedIpV6AddressRanges:
    Type: String
    Default: ""
    Description: Allowed IPv6 address ranges for access

  UsePreviousDeploymentParameter:
    Type: String
    AllowedValues: [true, false]
    Default: false
    Description: 'Use parameters from previous deployment when available (set to false to use current parameter values)'

Resources:

  # SNS Topic for deployment notifications
  DeploymentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: GenU Deployment Notifications
      TopicName: !Sub 'Notification-for-${AWS::StackName}'
      KmsMasterKeyId: 'alias/aws/sns'

  # SNS Subscription for email notifications
  DeploymentNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref DeploymentNotificationTopic
      Endpoint: !Ref NotificationEmailAddress

  # IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"

  # IAM Policy for CodeBuild
  CodeBuildServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildServiceRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${GenUDeploymentProject}:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${GenUDeploymentProject}"
          - Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref DeploymentNotificationTopic
          - Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:DeleteParameter
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/genu/${Environment}.json"
      Roles:
        - !Ref CodeBuildServiceRole

  # CodeBuild Project
  GenUDeploymentProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'CodeBuild-for-${AWS::StackName}'
      Description: 'Deploys Generative AI Use Cases'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Environment:
        Type: ARM_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: Environment
            Value: !Ref Environment
          - Name: ModelRegion
            Value: !Ref ModelRegion
          - Name: AdditionalModels
            Value: !Ref AdditionalModels
          - Name: RAGEnabled
            Value: !Ref RAGEnabled
          - Name: SelfSignUp
            Value: !Ref SelfSignUp
          - Name: AllowedSignUpEmailDomains
            Value: !Ref AllowedSignUpEmailDomains
          - Name: AllowedIpV4AddressRanges
            Value: !Ref AllowedIpV4AddressRanges
          - Name: AllowedIpV6AddressRanges
            Value: !Ref AllowedIpV6AddressRanges
          - Name: UsePreviousDeploymentParameter
            Value: !Ref UsePreviousDeploymentParameter
          - Name: SNSTopicArn
            Value: !Ref DeploymentNotificationTopic
          - Name: DEPLOYMENT_STACK_NAME
            Value: !Ref AWS::StackName
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 22
              commands:
                - echo "Starting GenU deployment"
                - aws sns publish --topic-arn ${SNSTopicArn} --subject "GenU Deployment Started" --message "Deployment of GenU has started. You will receive another notification when deployment is complete."
                - git clone https://github.com/aws-samples/generative-ai-use-cases.git
                - cd generative-ai-use-cases
                - npm ci
            pre_build:
              commands:
                - cd $CODEBUILD_SRC_DIR/generative-ai-use-cases
                - cp packages/cdk/parameter.ts packages/cdk/parameter.ts.backup
                - |
                  # Check Parameter Store for existing parameters
                  PARAM_STORE_KEY="/genu/${Environment}.json"
                  echo "Checking Parameter Store for existing parameters: $PARAM_STORE_KEY"
                  
                  if [ "$UsePreviousDeploymentParameter" = "true" ] && aws ssm get-parameter --name "$PARAM_STORE_KEY" --with-decryption --output json > stored-params.json 2>/dev/null; then
                    echo "Found existing parameters in Parameter Store"
                    # Extract the parameter value (which is the JSON string) and save it
                    jq -r '.Parameter.Value' stored-params.json > existing-env-params.json
                    echo "DEBUG - Retrieved parameters from Parameter Store:"
                    cat existing-env-params.json
                  else
                    echo "No existing parameters found in Parameter Store or UsePreviousDeploymentParameter=false. Using current parameters."
                  fi

                # Create and run unified parameter script with model conversion
                - |
                  cat > update-params.mjs << 'EOF'
                  import fs from 'fs';
                  import { execSync } from 'child_process';

                  // Model conversion functions
                  async function getAvailableModels(region) {
                    let inferenceProfiles = [];
                    try {
                      const profileResult = execSync(`aws bedrock list-inference-profiles --region ${region} --query "inferenceProfileSummaries[].inferenceProfileId" --output json`, { encoding: 'utf8' });
                      inferenceProfiles = JSON.parse(profileResult);
                    } catch (error) {
                      console.log(`No inference profiles available in ${region}`);
                    }
                    
                    const modelResult = execSync(`aws bedrock list-foundation-models --region ${region} --by-output-modality TEXT --query "modelSummaries[].modelId" --output json`, { encoding: 'utf8' });
                    const foundationModels = JSON.parse(modelResult);
                    
                    return [...inferenceProfiles, ...foundationModels];
                  }

                  function findAvailableModel(originalModelId, availableModels) {
                    const baseModelId = originalModelId.replace(/^(us|apac|eu)\./, '');

                    if (availableModels.includes(originalModelId)) {
                      return { modelId: originalModelId, converted: false, reason: 'Original available' };
                    }
                    
                    const inferenceProfile = availableModels.find(modelId => 
                      modelId !== baseModelId && 
                      modelId.replace(/^(us|apac|eu)\./, '') === baseModelId
                    );
                    
                    if (inferenceProfile) {
                      return { modelId: inferenceProfile, converted: true, reason: 'Inference profile' };
                    }
                    
                    if (availableModels.includes(baseModelId)) {
                      return { modelId: baseModelId, converted: true, reason: 'In-region model' };
                    }
                    
                    return { modelId: originalModelId, converted: false, reason: 'No matching model found' };
                  }

                  async function convertModels(modelIds, region) {
                    const availableModels = await getAvailableModels(region);
                    const results = [];                    
                    
                    for (const modelId of modelIds) {
                      const result = findAvailableModel(modelId, availableModels);
                      
                      if (result.reason !== 'No matching model found') {
                        results.push(result.modelId);
                      }
                      
                      if (result.converted) {
                        console.log(`✓ ${modelId} -> ${result.modelId} (${result.reason})`);
                      } else if (result.reason === 'No matching model found') {
                        console.log(`⚠ ${modelId} (${result.reason}) - FILTERED OUT`);
                      } else {
                        console.log(`✓ ${modelId} (${result.reason})`);
                      }
                    }
                    
                    return [...new Set(results)];
                  }

                  // Main parameter processing
                  const cdkJson = JSON.parse(fs.readFileSync('packages/cdk/cdk.json', 'utf8'));
                  const envName = process.env.Environment;
                  const usingExistingParams = process.env.UsePreviousDeploymentParameter === 'true';
                  
                  let params;
                  
                  if (usingExistingParams) {
                    params = JSON.parse(fs.readFileSync('existing-env-params.json', 'utf8'));
                  } else {                    
                    const modelRegion = process.env.ModelRegion;
                    const additionalModelsStr = process.env.AdditionalModels;
                    const ragEnabled = process.env.RAGEnabled;
                    const selfSignUp = process.env.SelfSignUp;
                    const allowedSignUpEmailDomains = process.env.AllowedSignUpEmailDomains;
                    const allowedIpV4AddressRanges = process.env.AllowedIpV4AddressRanges;
                    const allowedIpV6AddressRanges = process.env.AllowedIpV6AddressRanges;

                    const additionalModelIds = additionalModelsStr ? 
                      additionalModelsStr.split(',').map(id => id.trim()) 
                      : [];

                    const allModelIds = [...new Set([...additionalModelIds, ...cdkJson.context.modelIds])];
                    
                    // Convert models for the target region
                    const convertedModelIds = await convertModels(allModelIds, modelRegion);

                    params = {
                      modelRegion: modelRegion,
                      modelIds: convertedModelIds,
                      ragKnowledgeBaseEnabled: ragEnabled === 'Knowledge-Bases' || ragEnabled === 'Both' || ragEnabled === 'Both-Enterprise',
                      ragEnabled: ragEnabled === 'Kendra' || ragEnabled === 'Kendra-Enterprise' || ragEnabled === 'Both' || ragEnabled === 'Both-Enterprise',
                      selfSignUpEnabled: selfSignUp === 'true',
                      allowedSignUpEmailDomains: allowedSignUpEmailDomains ? allowedSignUpEmailDomains.split(',').map(d => d.trim()) : null,
                      allowedIpV4AddressRanges: allowedIpV4AddressRanges ? allowedIpV4AddressRanges.split(',').map(r => r.trim()) : null,
                      allowedIpV6AddressRanges: allowedIpV6AddressRanges ? allowedIpV6AddressRanges.split(',').map(r => r.trim()) : null
                    };
                  }

                  // Update parameter.ts with the params
                  let content = fs.readFileSync('packages/cdk/parameter.ts', 'utf8');
                  const envRegex = new RegExp(`(${envName}\\s*:\\s*{)[^}]*(})`, 'g');
                  
                  if (content.match(envRegex)) {
                    const envReplacement = `${envName}: ${JSON.stringify(params, null, 2)}`;
                    const updatedContent = content.replace(envRegex, envReplacement);
                    fs.writeFileSync('packages/cdk/parameter.ts', updatedContent);
                    console.log('Successfully updated parameter.ts');
                  } else {
                    console.error('Could not find environment section in parameter.ts');
                    process.exit(1);
                  }

                  // Save params for Parameter Store update
                  fs.writeFileSync('env-params.json', JSON.stringify(params, null, 2));
                  console.log('DEBUG - Final params:', JSON.stringify(params, null, 2));
                  EOF
                  
                  node update-params.mjs
                  
                  # Store the JSON as a single parameter with SecureString type
                  aws ssm put-parameter --name "/genu/${Environment}.json" \
                    --value "$(cat env-params.json)" \
                    --type "SecureString" \
                    --overwrite || exit 1
                  
                  # Add tags to the parameter (separate command due to AWS limitation)
                  aws ssm add-tags-to-resource \
                    --resource-type "Parameter" \
                    --resource-id "/genu/${Environment}.json" \
                    --tags "Key=Environment,Value=${Environment}" "Key=Application,Value=GenU" || true
                  
                  # Verify the parameter was stored
                  aws ssm get-parameter --name "/genu/${Environment}.json" --query 'Parameter.Name' || exit 1
                  
                  echo "Parameters stored successfully in Parameter Store as /genu/${Environment}.json"
                  
                  # Modify rag.ts if Enterprise Edition is selected
                  if [[ "${RAGEnabled}" == *"Enterprise"* ]]; then
                    echo "Configuring Kendra Enterprise Edition..."
                    RAG_FILE="packages/cdk/lib/construct/rag.ts"
                    if [ -f "$RAG_FILE" ]; then
                      # Create backup
                      cp "$RAG_FILE" "${RAG_FILE}.backup"
                      # Replace DEVELOPER_EDITION with ENTERPRISE_EDITION
                      sed -i 's/edition: .DEVELOPER_EDITION.,/edition: '\''ENTERPRISE_EDITION'\'',/g' "$RAG_FILE"
                      echo "Updated Kendra edition to ENTERPRISE_EDITION in $RAG_FILE"
                      # Verify the change
                      grep -n "edition:" "$RAG_FILE"
                    else
                      echo "Warning: Could not find $RAG_FILE to update Kendra edition"
                    fi
                  fi

            build:
              commands:
                - cd $CODEBUILD_SRC_DIR/generative-ai-use-cases
                
                # Check if bootstrap is needed
                - |
                  BOOTSTRAP_STACK_NAME="CDKToolkit"
                  BOOTSTRAP_EXISTS=$(aws cloudformation describe-stacks --stack-name $BOOTSTRAP_STACK_NAME 2>&1 || echo "NOT_EXISTS")
                  
                  if [[ $BOOTSTRAP_EXISTS == *"Stack with id $BOOTSTRAP_STACK_NAME does not exist"* ]]; then
                    echo "Running CDK bootstrap..."
                    npx -w packages/cdk cdk bootstrap
                  fi
                
                # Deploy the stack
                - npm run cdk:deploy:quick -- -c env=${Environment}
                
                # Get the application URL
                - cd $CODEBUILD_SRC_DIR/
                - |
                  STACK_NAME=$(aws cloudformation describe-stacks --query "Stacks[?contains(StackName, 'GenerativeAiUseCasesStack${Environment}')].StackName" --output text)
                  APP_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='WebUrl'].OutputValue" --output text)
                  USER_POOL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text)
                  AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                  USER_CREATION_URL="https://${AWS_ACCOUNT_ID}.${AWS_DEFAULT_REGION}.console.aws.amazon.com/cognito/v2/idp/user-pools/${USER_POOL}/user-management/users?region=${AWS_DEFAULT_REGION}"

                  cat << EOF > deployment-info.txt
                  GenU Deployment Completed Successfully!
                  Deployment Time: $(date '+%Y-%m-%d %H:%M:%S')

                  Login URL: ${APP_URL}

                  Important Next Steps:
                  1. Please enable model access on Amazon Bedrock:
                     https://${AWS_ACCOUNT_ID}.${ModelRegion}.console.aws.amazon.com/bedrock/home?region=${ModelRegion}#/modelaccess
                  
                  2. Please create a user in the Cognito User Pool to access the application (if self-signup disabled):
                     ${USER_CREATION_URL}
                     User Registration Guide : https://catalog.workshops.aws/generative-ai-use-cases-jp/ja-JP/disable-self-signup/create-account

                  Configuration:
                  Environment: ${Environment}
                  Model Region: ${ModelRegion}
                  RAG Enabled: ${RAGEnabled}
                  Kendra Edition: $([[ "${RAGEnabled}" == *"Enterprise"* ]] && echo "Enterprise" || echo "Developer")
                  Self-Signup Enabled: ${SelfSignUp}
                  Allowed SignUp Email Domains: ${AllowedSignUpEmailDomains}
                  Allowed IpV4 Address Ranges: ${AllowedIpV4AddressRanges}
                  Allowed IpV6 Address Ranges: ${AllowedIpV6AddressRanges}
                  Detail (Parameter Store): https://${AWS_ACCOUNT_ID}.${AWS_DEFAULT_REGION}.console.aws.amazon.com/systems-manager/parameters/%252Fgenu%252F${Environment}.json/description?region=${AWS_DEFAULT_REGION}

                  Stack Details:
                  Stack Name: ${STACK_NAME}
                  Region: ${AWS_DEFAULT_REGION}
                  CodeBuild Logs: https://${AWS_ACCOUNT_ID}.${AWS_DEFAULT_REGION}.console.aws.amazon.com/codesuite/codebuild/projects/CodeBuild-for-${DEPLOYMENT_STACK_NAME}/history?region=${AWS_DEFAULT_REGION}

                  EOF

            post_build:
              commands:
                - cd $CODEBUILD_SRC_DIR/
                
                # Cleanup all other GenUDeploymentStack instances except current one
                - |
                  echo "Cleaning up other GenUDeploymentStack instances..."
                  CURRENT_STACK_NAME="$DEPLOYMENT_STACK_NAME"
                  echo "Current deployment stack name: $CURRENT_STACK_NAME"
                  
                  # Get all GenUDeploymentStack instances except the current one, only in COMPLETE states to avoid race conditions
                  OTHER_STACKS=$(aws cloudformation describe-stacks \
                    --query "Stacks[?starts_with(StackName, 'GenUDeploymentStack') && StackName != '$CURRENT_STACK_NAME' && (StackStatus == 'CREATE_COMPLETE' || StackStatus == 'UPDATE_COMPLETE')].StackName" \
                    --output text)
                  
                  if [ ! -z "$OTHER_STACKS" ] && [ "$OTHER_STACKS" != "None" ]; then
                    echo "Found other GenUDeploymentStack instances to delete: $OTHER_STACKS"
                    
                    # Convert space-separated list to array and delete each stack                    
                    for TARGET_STACK in $OTHER_STACKS; do
                      echo "Deleting stack: $TARGET_STACK"
                      if aws cloudformation delete-stack --stack-name "$TARGET_STACK" 2>/dev/null; then
                        echo "Deletion initiated successfully for stack: $TARGET_STACK"
                        DELETED_STACKS="$DELETED_STACKS $TARGET_STACK"
                      else
                        echo "Warning: Failed to initiate deletion for stack: $TARGET_STACK"
                      fi
                    done
                    
                    # Add cleanup information to deployment message
                    cat << EOF >> deployment-info.txt
                    
                  Cleanup Information:
                  The following previous GenUDeploymentStack instances have been deleted:
                  $OTHER_STACKS
                  
                  This ensures only the current deployment stack remains active.
                  
                  EOF
                  else
                    echo "No other GenUDeploymentStack instances found to delete."
                    
                    # Add information that no cleanup was needed
                    cat << EOF >> deployment-info.txt
                    
                  Cleanup Information:
                  No other GenUDeploymentStack instances were found, so no cleanup was necessary.
                  
                  EOF
                  fi
                
                - aws sns publish --topic-arn "${SNSTopicArn}" --subject "GenU Deployment Complete" --message file://deployment-info.txt
                - rm -rf generative-ai-use-cases
          artifacts:
            files:
              - deployment-info.txt
      TimeoutInMinutes: 120

  # Custom Resource to trigger CodeBuild
  DeploymentTrigger:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt TriggerFunction.Arn
      ProjectName: !Ref GenUDeploymentProject
      ServiceTimeout: 600

  # Lambda function for the Custom Resource
  TriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt TriggerFunctionRole.Arn
      Runtime: nodejs20.x
      Timeout: 30
      Code:
        ZipFile: |
          const { CodeBuildClient, StartBuildCommand } = require('@aws-sdk/client-codebuild');
          const response = require('cfn-response');

          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            
            const physicalResourceId = `CodeBuildTrigger-${event.ResourceProperties.ProjectName}`;
            const responseData = {};
            
            try {
              const codebuild = new CodeBuildClient({ 
                region: process.env.AWS_REGION,
                maxAttempts: 3
              });

              if (event.RequestType === 'Create' || event.RequestType === 'Update') {
                const command = new StartBuildCommand({ 
                  projectName: event.ResourceProperties.ProjectName 
                });
                const result = await codebuild.send(command);
                responseData.BuildId = result.build.id;
              }
              
              await response.send(event, context, response.SUCCESS, responseData, physicalResourceId);
            } catch (error) {
              console.error('Error:', error);
              await response.send(event, context, response.FAILED, { Error: error.message }, physicalResourceId);
            }
          };

  # IAM Role for Lambda Trigger Function
  TriggerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: CodeBuildStartPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource: !GetAtt GenUDeploymentProject.Arn


Outputs:
  ParameterStoreName:
    Description: Parameter Store name for GenU environment parameters
    Value: !Sub "/genu/${Environment}.json"
  
  NotificationTopicArn:
    Description: ARN of the SNS topic for deployment notifications
    Value: !Ref DeploymentNotificationTopic
  
  CodeBuildProjectName:
    Description: Name of the CodeBuild project
    Value: !Ref GenUDeploymentProject
  
  CodeBuildLogGroup:
    Description: CloudWatch Logs group for CodeBuild logs
    Value: !Sub '/aws/codebuild/${GenUDeploymentProject}'
  
  DeploymentStatus:
    Description: Deployment status information
    Value: !Sub "Deployment has been initiated. You will receive an email notification at ${NotificationEmailAddress} when the deployment is complete."
